//
// Summary:
//     Applies an accumulator function over a sequence. The specified seed value is
//     used as the initial accumulator value.
//
// Parameters:
//   source:
//     An System.Collections.Generic.IEnumerable`1 to aggregate over.
//
//   seed:
//     The initial accumulator value.
//
//   func:
//     An accumulator function to be invoked on each element.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TAccumulate:
//     The type of the accumulator value.
//
// Returns:
//     The final accumulator value.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or func is null.
public static TAccumulate Aggregate<TSource, TAccumulate>(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func);
//
// Summary:
//     Applies an accumulator function over a sequence. The specified seed value is
//     used as the initial accumulator value, and the specified function is used to
//     select the result value.
//
// Parameters:
//   source:
//     An System.Collections.Generic.IEnumerable`1 to aggregate over.
//
//   seed:
//     The initial accumulator value.
//
//   func:
//     An accumulator function to be invoked on each element.
//
//   resultSelector:
//     A function to transform the final accumulator value into the result value.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TAccumulate:
//     The type of the accumulator value.
//
//   TResult:
//     The type of the resulting value.
//
// Returns:
//     The transformed final accumulator value.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or func or resultSelector is null.
public static TResult Aggregate<TSource, TAccumulate, TResult>(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector);
//
// Summary:
//     Returns an empty System.Collections.Generic.IEnumerable`1 that has the specified
//     type argument.
//
// Type parameters:
//   TResult:
//     The type to assign to the type parameter of the returned generic System.Collections.Generic.IEnumerable`1.
//
// Returns:
//     An empty System.Collections.Generic.IEnumerable`1 whose type argument is TResult.
public static IEnumerable<TResult> Empty<TResult>();
//
// Summary:
//     Groups the elements of a sequence according to a specified key selector function.
//
// Parameters:
//   source:
//     An System.Collections.Generic.IEnumerable`1 whose elements to group.
//
//   keySelector:
//     A function to extract the key for each element.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
// Returns:
//     An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of
//     TKey, TSource)) in Visual Basic where each System.Linq.IGrouping`2 object contains
//     a sequence of objects and a key.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector is null.
public static IEnumerable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector);
//
// Summary:
//     Groups the elements of a sequence according to a specified key selector function
//     and compares the keys by using a specified comparer.
//
// Parameters:
//   source:
//     An System.Collections.Generic.IEnumerable`1 whose elements to group.
//
//   keySelector:
//     A function to extract the key for each element.
//
//   comparer:
//     An System.Collections.Generic.IEqualityComparer`1 to compare keys.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
// Returns:
//     An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of
//     TKey, TSource)) in Visual Basic where each System.Linq.IGrouping`2 object contains
//     a collection of objects and a key.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector is null.
public static IEnumerable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer);
//
// Summary:
//     Groups the elements of a sequence according to a specified key selector function
//     and creates a result value from each group and its key. Key values are compared
//     by using a specified comparer, and the elements of each group are projected by
//     using a specified function.
//
// Parameters:
//   source:
//     An System.Collections.Generic.IEnumerable`1 whose elements to group.
//
//   keySelector:
//     A function to extract the key for each element.
//
//   elementSelector:
//     A function to map each source element to an element in an System.Linq.IGrouping`2.
//
//   resultSelector:
//     A function to create a result value from each group.
//
//   comparer:
//     An System.Collections.Generic.IEqualityComparer`1 to compare keys with.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
//   TElement:
//     The type of the elements in each System.Linq.IGrouping`2.
//
//   TResult:
//     The type of the result value returned by resultSelector.
//
// Returns:
//     A collection of elements of type TResult where each element represents a projection
//     over a group and its key.
public static IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector, IEqualityComparer<TKey> comparer);
//
// Summary:
//     Groups the elements of a sequence according to a key selector function. The keys
//     are compared by using a comparer and each group's elements are projected by using
//     a specified function.
//
// Parameters:
//   source:
//     An System.Collections.Generic.IEnumerable`1 whose elements to group.
//
//   keySelector:
//     A function to extract the key for each element.
//
//   elementSelector:
//     A function to map each source element to an element in an System.Linq.IGrouping`2.
//
//   comparer:
//     An System.Collections.Generic.IEqualityComparer`1 to compare keys.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
//   TElement:
//     The type of the elements in the System.Linq.IGrouping`2.
//
// Returns:
//     An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of
//     TKey, TElement)) in Visual Basic where each System.Linq.IGrouping`2 object contains
//     a collection of objects of type TElement and a key.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector or elementSelector is null.
public static IEnumerable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer);
//
// Summary:
//     Groups the elements of a sequence according to a specified key selector function
//     and creates a result value from each group and its key. The keys are compared
//     by using a specified comparer.
//
// Parameters:
//   source:
//     An System.Collections.Generic.IEnumerable`1 whose elements to group.
//
//   keySelector:
//     A function to extract the key for each element.
//
//   resultSelector:
//     A function to create a result value from each group.
//
//   comparer:
//     An System.Collections.Generic.IEqualityComparer`1 to compare keys with.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
//   TResult:
//     The type of the result value returned by resultSelector.
//
// Returns:
//     A collection of elements of type TResult where each element represents a projection
//     over a group and its key.
public static IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector, IEqualityComparer<TKey> comparer);
//
// Summary:
//     Groups the elements of a sequence according to a specified key selector function
//     and creates a result value from each group and its key.
//
// Parameters:
//   source:
//     An System.Collections.Generic.IEnumerable`1 whose elements to group.
//
//   keySelector:
//     A function to extract the key for each element.
//
//   resultSelector:
//     A function to create a result value from each group.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
//   TResult:
//     The type of the result value returned by resultSelector.
//
// Returns:
//     A collection of elements of type TResult where each element represents a projection
//     over a group and its key.
public static IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector);
//
// Summary:
//     Groups the elements of a sequence according to a specified key selector function
//     and creates a result value from each group and its key. The elements of each
//     group are projected by using a specified function.
//
// Parameters:
//   source:
//     An System.Collections.Generic.IEnumerable`1 whose elements to group.
//
//   keySelector:
//     A function to extract the key for each element.
//
//   elementSelector:
//     A function to map each source element to an element in an System.Linq.IGrouping`2.
//
//   resultSelector:
//     A function to create a result value from each group.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
//   TElement:
//     The type of the elements in each System.Linq.IGrouping`2.
//
//   TResult:
//     The type of the result value returned by resultSelector.
//
// Returns:
//     A collection of elements of type TResult where each element represents a projection
//     over a group and its key.
public static IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector);
//
// Summary:
//     Groups the elements of a sequence according to a specified key selector function
//     and projects the elements for each group by using a specified function.
//
// Parameters:
//   source:
//     An System.Collections.Generic.IEnumerable`1 whose elements to group.
//
//   keySelector:
//     A function to extract the key for each element.
//
//   elementSelector:
//     A function to map each source element to an element in the System.Linq.IGrouping`2.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
//   TElement:
//     The type of the elements in the System.Linq.IGrouping`2.
//
// Returns:
//     An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of
//     TKey, TElement)) in Visual Basic where each System.Linq.IGrouping`2 object contains
//     a collection of objects of type TElement and a key.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector or elementSelector is null.
public static IEnumerable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector);
//
// Summary:
//     Correlates the elements of two sequences based on key equality and groups the
//     results. A specified System.Collections.Generic.IEqualityComparer`1 is used to
//     compare keys.
//
// Parameters:
//   outer:
//     The first sequence to join.
//
//   inner:
//     The sequence to join to the first sequence.
//
//   outerKeySelector:
//     A function to extract the join key from each element of the first sequence.
//
//   innerKeySelector:
//     A function to extract the join key from each element of the second sequence.
//
//   resultSelector:
//     A function to create a result element from an element from the first sequence
//     and a collection of matching elements from the second sequence.
//
//   comparer:
//     An System.Collections.Generic.IEqualityComparer`1 to hash and compare keys.
//
// Type parameters:
//   TOuter:
//     The type of the elements of the first sequence.
//
//   TInner:
//     The type of the elements of the second sequence.
//
//   TKey:
//     The type of the keys returned by the key selector functions.
//
//   TResult:
//     The type of the result elements.
//
// Returns:
//     An System.Collections.Generic.IEnumerable`1 that contains elements of type TResult
//     that are obtained by performing a grouped join on two sequences.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.
public static IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer);
//
// Summary:
//     Correlates the elements of two sequences based on equality of keys and groups
//     the results. The default equality comparer is used to compare keys.
//
// Parameters:
//   outer:
//     The first sequence to join.
//
//   inner:
//     The sequence to join to the first sequence.
//
//   outerKeySelector:
//     A function to extract the join key from each element of the first sequence.
//
//   innerKeySelector:
//     A function to extract the join key from each element of the second sequence.
//
//   resultSelector:
//     A function to create a result element from an element from the first sequence
//     and a collection of matching elements from the second sequence.
//
// Type parameters:
//   TOuter:
//     The type of the elements of the first sequence.
//
//   TInner:
//     The type of the elements of the second sequence.
//
//   TKey:
//     The type of the keys returned by the key selector functions.
//
//   TResult:
//     The type of the result elements.
//
// Returns:
//     An System.Collections.Generic.IEnumerable`1 that contains elements of type TResult
//     that are obtained by performing a grouped join on two sequences.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.
public static IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector);
//
// Summary:
//     Correlates the elements of two sequences based on matching keys. The default
//     equality comparer is used to compare keys.
//
// Parameters:
//   outer:
//     The first sequence to join.
//
//   inner:
//     The sequence to join to the first sequence.
//
//   outerKeySelector:
//     A function to extract the join key from each element of the first sequence.
//
//   innerKeySelector:
//     A function to extract the join key from each element of the second sequence.
//
//   resultSelector:
//     A function to create a result element from two matching elements.
//
// Type parameters:
//   TOuter:
//     The type of the elements of the first sequence.
//
//   TInner:
//     The type of the elements of the second sequence.
//
//   TKey:
//     The type of the keys returned by the key selector functions.
//
//   TResult:
//     The type of the result elements.
//
// Returns:
//     An System.Collections.Generic.IEnumerable`1 that has elements of type TResult
//     that are obtained by performing an inner join on two sequences.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.
public static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector);
//
// Summary:
//     Correlates the elements of two sequences based on matching keys. A specified
//     System.Collections.Generic.IEqualityComparer`1 is used to compare keys.
//
// Parameters:
//   outer:
//     The first sequence to join.
//
//   inner:
//     The sequence to join to the first sequence.
//
//   outerKeySelector:
//     A function to extract the join key from each element of the first sequence.
//
//   innerKeySelector:
//     A function to extract the join key from each element of the second sequence.
//
//   resultSelector:
//     A function to create a result element from two matching elements.
//
//   comparer:
//     An System.Collections.Generic.IEqualityComparer`1 to hash and compare keys.
//
// Type parameters:
//   TOuter:
//     The type of the elements of the first sequence.
//
//   TInner:
//     The type of the elements of the second sequence.
//
//   TKey:
//     The type of the keys returned by the key selector functions.
//
//   TResult:
//     The type of the result elements.
//
// Returns:
//     An System.Collections.Generic.IEnumerable`1 that has elements of type TResult
//     that are obtained by performing an inner join on two sequences.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.
public static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer);
//
// Summary:
//     Invokes a transform function on each element of a generic sequence and returns
//     the maximum resulting value.
//
// Parameters:
//   source:
//     A sequence of values to determine the maximum value of.
//
//   selector:
//     A transform function to apply to each element.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TResult:
//     The type of the value returned by selector.
//
// Returns:
//     The maximum value in the sequence.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or selector is null.
public static TResult Max<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector);
//
// Summary:
//     Invokes a transform function on each element of a generic sequence and returns
//     the minimum resulting value.
//
// Parameters:
//   source:
//     A sequence of values to determine the minimum value of.
//
//   selector:
//     A transform function to apply to each element.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TResult:
//     The type of the value returned by selector.
//
// Returns:
//     The minimum value in the sequence.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or selector is null.
public static TResult Min<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector);
//
// Summary:
//     Sorts the elements of a sequence in ascending order according to a key.
//
// Parameters:
//   source:
//     A sequence of values to order.
//
//   keySelector:
//     A function to extract a key from an element.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
// Returns:
//     An System.Linq.IOrderedEnumerable`1 whose elements are sorted according to a
//     key.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector is null.
public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector);
//
// Summary:
//     Sorts the elements of a sequence in ascending order by using a specified comparer.
//
// Parameters:
//   source:
//     A sequence of values to order.
//
//   keySelector:
//     A function to extract a key from an element.
//
//   comparer:
//     An System.Collections.Generic.IComparer`1 to compare keys.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
// Returns:
//     An System.Linq.IOrderedEnumerable`1 whose elements are sorted according to a
//     key.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector is null.
public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer);
//
// Summary:
//     Sorts the elements of a sequence in descending order according to a key.
//
// Parameters:
//   source:
//     A sequence of values to order.
//
//   keySelector:
//     A function to extract a key from an element.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
// Returns:
//     An System.Linq.IOrderedEnumerable`1 whose elements are sorted in descending order
//     according to a key.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector is null.
public static IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector);
//
// Summary:
//     Sorts the elements of a sequence in descending order by using a specified comparer.
//
// Parameters:
//   source:
//     A sequence of values to order.
//
//   keySelector:
//     A function to extract a key from an element.
//
//   comparer:
//     An System.Collections.Generic.IComparer`1 to compare keys.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
// Returns:
//     An System.Linq.IOrderedEnumerable`1 whose elements are sorted in descending order
//     according to a key.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector is null.
public static IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer);
//
// Summary:
//     Generates a sequence of integral numbers within a specified range.
//
// Parameters:
//   start:
//     The value of the first integer in the sequence.
//
//   count:
//     The number of sequential integers to generate.
//
// Returns:
//     An IEnumerable<Int32> in C# or IEnumerable(Of Int32) in Visual Basic that contains
//     a range of sequential integral numbers.
//
// Exceptions:
//   T:System.ArgumentOutOfRangeException:
//     count is less than 0.-or- start + count -1 is larger than System.Int32.MaxValue.
public static IEnumerable<int> Range(int start, int count);
//
// Summary:
//     Generates a sequence that contains one repeated value.
//
// Parameters:
//   element:
//     The value to be repeated.
//
//   count:
//     The number of times to repeat the value in the generated sequence.
//
// Type parameters:
//   TResult:
//     The type of the value to be repeated in the result sequence.
//
// Returns:
//     An System.Collections.Generic.IEnumerable`1 that contains a repeated value.
//
// Exceptions:
//   T:System.ArgumentOutOfRangeException:
//     count is less than 0.
public static IEnumerable<TResult> Repeat<TResult>(TResult element, int count);
//
// Summary:
//     Projects each element of a sequence into a new form.
//
// Parameters:
//   source:
//     A sequence of values to invoke a transform function on.
//
//   selector:
//     A transform function to apply to each element.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TResult:
//     The type of the value returned by selector.
//
// Returns:
//     An System.Collections.Generic.IEnumerable`1 whose elements are the result of
//     invoking the transform function on each element of source.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or selector is null.
public static IEnumerable<TResult> Select<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector);
//
// Summary:
//     Projects each element of a sequence into a new form by incorporating the element's
//     index.
//
// Parameters:
//   source:
//     A sequence of values to invoke a transform function on.
//
//   selector:
//     A transform function to apply to each source element; the second parameter of
//     the function represents the index of the source element.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TResult:
//     The type of the value returned by selector.
//
// Returns:
//     An System.Collections.Generic.IEnumerable`1 whose elements are the result of
//     invoking the transform function on each element of source.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or selector is null.
public static IEnumerable<TResult> Select<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, int, TResult> selector);
//
// Summary:
//     Projects each element of a sequence to an System.Collections.Generic.IEnumerable`1,
//     and flattens the resulting sequences into one sequence. The index of each source
//     element is used in the projected form of that element.
//
// Parameters:
//   source:
//     A sequence of values to project.
//
//   selector:
//     A transform function to apply to each source element; the second parameter of
//     the function represents the index of the source element.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TResult:
//     The type of the elements of the sequence returned by selector.
//
// Returns:
//     An System.Collections.Generic.IEnumerable`1 whose elements are the result of
//     invoking the one-to-many transform function on each element of an input sequence.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or selector is null.
public static IEnumerable<TResult> SelectMany<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector);
//
// Summary:
//     Projects each element of a sequence to an System.Collections.Generic.IEnumerable`1,
//     flattens the resulting sequences into one sequence, and invokes a result selector
//     function on each element therein. The index of each source element is used in
//     the intermediate projected form of that element.
//
// Parameters:
//   source:
//     A sequence of values to project.
//
//   collectionSelector:
//     A transform function to apply to each source element; the second parameter of
//     the function represents the index of the source element.
//
//   resultSelector:
//     A transform function to apply to each element of the intermediate sequence.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TCollection:
//     The type of the intermediate elements collected by collectionSelector.
//
//   TResult:
//     The type of the elements of the resulting sequence.
//
// Returns:
//     An System.Collections.Generic.IEnumerable`1 whose elements are the result of
//     invoking the one-to-many transform function collectionSelector on each element
//     of source and then mapping each of those sequence elements and their corresponding
//     source element to a result element.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or collectionSelector or resultSelector is null.
public static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector);
//
// Summary:
//     Projects each element of a sequence to an System.Collections.Generic.IEnumerable`1,
//     flattens the resulting sequences into one sequence, and invokes a result selector
//     function on each element therein.
//
// Parameters:
//   source:
//     A sequence of values to project.
//
//   collectionSelector:
//     A transform function to apply to each element of the input sequence.
//
//   resultSelector:
//     A transform function to apply to each element of the intermediate sequence.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TCollection:
//     The type of the intermediate elements collected by collectionSelector.
//
//   TResult:
//     The type of the elements of the resulting sequence.
//
// Returns:
//     An System.Collections.Generic.IEnumerable`1 whose elements are the result of
//     invoking the one-to-many transform function collectionSelector on each element
//     of source and then mapping each of those sequence elements and their corresponding
//     source element to a result element.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or collectionSelector or resultSelector is null.
public static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector);
//
// Summary:
//     Projects each element of a sequence to an System.Collections.Generic.IEnumerable`1
//     and flattens the resulting sequences into one sequence.
//
// Parameters:
//   source:
//     A sequence of values to project.
//
//   selector:
//     A transform function to apply to each element.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TResult:
//     The type of the elements of the sequence returned by selector.
//
// Returns:
//     An System.Collections.Generic.IEnumerable`1 whose elements are the result of
//     invoking the one-to-many transform function on each element of the input sequence.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or selector is null.
public static IEnumerable<TResult> SelectMany<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector);
//
// Summary:
//     Performs a subsequent ordering of the elements in a sequence in ascending order
//     by using a specified comparer.
//
// Parameters:
//   source:
//     An System.Linq.IOrderedEnumerable`1 that contains elements to sort.
//
//   keySelector:
//     A function to extract a key from each element.
//
//   comparer:
//     An System.Collections.Generic.IComparer`1 to compare keys.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
// Returns:
//     An System.Linq.IOrderedEnumerable`1 whose elements are sorted according to a
//     key.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector is null.
public static IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer);
//
// Summary:
//     Performs a subsequent ordering of the elements in a sequence in ascending order
//     according to a key.
//
// Parameters:
//   source:
//     An System.Linq.IOrderedEnumerable`1 that contains elements to sort.
//
//   keySelector:
//     A function to extract a key from each element.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
// Returns:
//     An System.Linq.IOrderedEnumerable`1 whose elements are sorted according to a
//     key.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector is null.
public static IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector);
//
// Summary:
//     Performs a subsequent ordering of the elements in a sequence in descending order
//     by using a specified comparer.
//
// Parameters:
//   source:
//     An System.Linq.IOrderedEnumerable`1 that contains elements to sort.
//
//   keySelector:
//     A function to extract a key from each element.
//
//   comparer:
//     An System.Collections.Generic.IComparer`1 to compare keys.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
// Returns:
//     An System.Linq.IOrderedEnumerable`1 whose elements are sorted in descending order
//     according to a key.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector is null.
public static IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer);
//
// Summary:
//     Performs a subsequent ordering of the elements in a sequence in descending order,
//     according to a key.
//
// Parameters:
//   source:
//     An System.Linq.IOrderedEnumerable`1 that contains elements to sort.
//
//   keySelector:
//     A function to extract a key from each element.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
// Returns:
//     An System.Linq.IOrderedEnumerable`1 whose elements are sorted in descending order
//     according to a key.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector is null.
public static IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector);
//
// Summary:
//     Creates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1
//     according to a specified key selector function.
//
// Parameters:
//   source:
//     An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2
//     from.
//
//   keySelector:
//     A function to extract a key from each element.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
// Returns:
//     A System.Collections.Generic.Dictionary`2 that contains keys and values.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector is null.-or- keySelector produces a key that is null.
//
//   T:System.ArgumentException:
//     keySelector produces duplicate keys for two elements.
public static Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector);
//
// Summary:
//     Creates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1
//     according to a specified key selector function and key comparer.
//
// Parameters:
//   source:
//     An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2
//     from.
//
//   keySelector:
//     A function to extract a key from each element.
//
//   comparer:
//     An System.Collections.Generic.IEqualityComparer`1 to compare keys.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the keys returned by keySelector.
//
// Returns:
//     A System.Collections.Generic.Dictionary`2 that contains keys and values.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector is null.-or- keySelector produces a key that is null.
//
//   T:System.ArgumentException:
//     keySelector produces duplicate keys for two elements.
public static Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer);
//
// Summary:
//     Creates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1
//     according to specified key selector and element selector functions.
//
// Parameters:
//   source:
//     An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2
//     from.
//
//   keySelector:
//     A function to extract a key from each element.
//
//   elementSelector:
//     A transform function to produce a result element value from each element.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
//   TElement:
//     The type of the value returned by elementSelector.
//
// Returns:
//     A System.Collections.Generic.Dictionary`2 that contains values of type TElement
//     selected from the input sequence.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector or elementSelector is null.-or- keySelector produces a
//     key that is null.
//
//   T:System.ArgumentException:
//     keySelector produces duplicate keys for two elements.
public static Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector);
//
// Summary:
//     Creates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1
//     according to a specified key selector function, a comparer, and an element selector
//     function.
//
// Parameters:
//   source:
//     An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2
//     from.
//
//   keySelector:
//     A function to extract a key from each element.
//
//   elementSelector:
//     A transform function to produce a result element value from each element.
//
//   comparer:
//     An System.Collections.Generic.IEqualityComparer`1 to compare keys.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
//   TElement:
//     The type of the value returned by elementSelector.
//
// Returns:
//     A System.Collections.Generic.Dictionary`2 that contains values of type TElement
//     selected from the input sequence.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector or elementSelector is null.-or- keySelector produces a
//     key that is null.
//
//   T:System.ArgumentException:
//     keySelector produces duplicate keys for two elements.
public static Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer);
//
// Summary:
//     Creates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1
//     according to a specified key selector function.
//
// Parameters:
//   source:
//     The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2
//     from.
//
//   keySelector:
//     A function to extract a key from each element.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
// Returns:
//     A System.Linq.Lookup`2 that contains keys and values.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector is null.
public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector);
//
// Summary:
//     Creates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1
//     according to a specified key selector function and key comparer.
//
// Parameters:
//   source:
//     The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2
//     from.
//
//   keySelector:
//     A function to extract a key from each element.
//
//   comparer:
//     An System.Collections.Generic.IEqualityComparer`1 to compare keys.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
// Returns:
//     A System.Linq.Lookup`2 that contains keys and values.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector is null.
public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer);
//
// Summary:
//     Creates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1
//     according to specified key selector and element selector functions.
//
// Parameters:
//   source:
//     The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2
//     from.
//
//   keySelector:
//     A function to extract a key from each element.
//
//   elementSelector:
//     A transform function to produce a result element value from each element.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
//   TElement:
//     The type of the value returned by elementSelector.
//
// Returns:
//     A System.Linq.Lookup`2 that contains values of type TElement selected from the
//     input sequence.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector or elementSelector is null.
public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector);
//
// Summary:
//     Creates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1
//     according to a specified key selector function, a comparer and an element selector
//     function.
//
// Parameters:
//   source:
//     The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2
//     from.
//
//   keySelector:
//     A function to extract a key from each element.
//
//   elementSelector:
//     A transform function to produce a result element value from each element.
//
//   comparer:
//     An System.Collections.Generic.IEqualityComparer`1 to compare keys.
//
// Type parameters:
//   TSource:
//     The type of the elements of source.
//
//   TKey:
//     The type of the key returned by keySelector.
//
//   TElement:
//     The type of the value returned by elementSelector.
//
// Returns:
//     A System.Linq.Lookup`2 that contains values of type TElement selected from the
//     input sequence.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     source or keySelector or elementSelector is null.
public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer);
//
// Summary:
//     Applies a specified function to the corresponding elements of two sequences,
//     producing a sequence of the results.
//
// Parameters:
//   first:
//     The first sequence to merge.
//
//   second:
//     The second sequence to merge.
//
//   resultSelector:
//     A function that specifies how to merge the elements from the two sequences.
//
// Type parameters:
//   TFirst:
//     The type of the elements of the first input sequence.
//
//   TSecond:
//     The type of the elements of the second input sequence.
//
//   TResult:
//     The type of the elements of the result sequence.
//
// Returns:
//     An System.Collections.Generic.IEnumerable`1 that contains merged elements of
//     two input sequences.
//
// Exceptions:
//   T:System.ArgumentNullException:
//     first or second is null.
public static IEnumerable<TResult> Zip<TFirst, TSecond, TResult>(this IEnumerable<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector);